/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.crm.validation.lead.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Avro schema for Lead domain model */
@org.apache.avro.specific.AvroGenerated
public class LeadRejectedEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6232275029046242095L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LeadRejectedEvent\",\"namespace\":\"com.crm.validation.lead.avro\",\"doc\":\"Avro schema for Lead domain model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"record\",\"name\":\"LeadId\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"personalInfo\",\"type\":{\"type\":\"record\",\"name\":\"PersonalInfo\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"birthdate\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}},{\"name\":\"email\",\"type\":{\"type\":\"record\",\"name\":\"Email\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"phoneNumber\",\"type\":{\"type\":\"record\",\"name\":\"PhoneNumber\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"document\",\"type\":{\"type\":\"record\",\"name\":\"Document\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"number\",\"type\":\"int\"}]}},{\"name\":\"state\",\"type\":{\"type\":\"enum\",\"name\":\"LeadState\",\"symbols\":[\"NEW\",\"IN_PROGRESS\",\"PROSPECT\",\"REJECTED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<LeadRejectedEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LeadRejectedEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LeadRejectedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LeadRejectedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LeadRejectedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LeadRejectedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LeadRejectedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LeadRejectedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LeadRejectedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.crm.validation.lead.avro.LeadId id;
  private com.crm.validation.lead.avro.PersonalInfo personalInfo;
  private com.crm.validation.lead.avro.Email email;
  private com.crm.validation.lead.avro.PhoneNumber phoneNumber;
  private com.crm.validation.lead.avro.Document document;
  private com.crm.validation.lead.avro.LeadState state;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LeadRejectedEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param personalInfo The new value for personalInfo
   * @param email The new value for email
   * @param phoneNumber The new value for phoneNumber
   * @param document The new value for document
   * @param state The new value for state
   */
  public LeadRejectedEvent(com.crm.validation.lead.avro.LeadId id, com.crm.validation.lead.avro.PersonalInfo personalInfo, com.crm.validation.lead.avro.Email email, com.crm.validation.lead.avro.PhoneNumber phoneNumber, com.crm.validation.lead.avro.Document document, com.crm.validation.lead.avro.LeadState state) {
    this.id = id;
    this.personalInfo = personalInfo;
    this.email = email;
    this.phoneNumber = phoneNumber;
    this.document = document;
    this.state = state;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return personalInfo;
    case 2: return email;
    case 3: return phoneNumber;
    case 4: return document;
    case 5: return state;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (com.crm.validation.lead.avro.LeadId)value$; break;
    case 1: personalInfo = (com.crm.validation.lead.avro.PersonalInfo)value$; break;
    case 2: email = (com.crm.validation.lead.avro.Email)value$; break;
    case 3: phoneNumber = (com.crm.validation.lead.avro.PhoneNumber)value$; break;
    case 4: document = (com.crm.validation.lead.avro.Document)value$; break;
    case 5: state = (com.crm.validation.lead.avro.LeadState)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public com.crm.validation.lead.avro.LeadId getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(com.crm.validation.lead.avro.LeadId value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'personalInfo' field.
   * @return The value of the 'personalInfo' field.
   */
  public com.crm.validation.lead.avro.PersonalInfo getPersonalInfo() {
    return personalInfo;
  }


  /**
   * Sets the value of the 'personalInfo' field.
   * @param value the value to set.
   */
  public void setPersonalInfo(com.crm.validation.lead.avro.PersonalInfo value) {
    this.personalInfo = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public com.crm.validation.lead.avro.Email getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(com.crm.validation.lead.avro.Email value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'phoneNumber' field.
   * @return The value of the 'phoneNumber' field.
   */
  public com.crm.validation.lead.avro.PhoneNumber getPhoneNumber() {
    return phoneNumber;
  }


  /**
   * Sets the value of the 'phoneNumber' field.
   * @param value the value to set.
   */
  public void setPhoneNumber(com.crm.validation.lead.avro.PhoneNumber value) {
    this.phoneNumber = value;
  }

  /**
   * Gets the value of the 'document' field.
   * @return The value of the 'document' field.
   */
  public com.crm.validation.lead.avro.Document getDocument() {
    return document;
  }


  /**
   * Sets the value of the 'document' field.
   * @param value the value to set.
   */
  public void setDocument(com.crm.validation.lead.avro.Document value) {
    this.document = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public com.crm.validation.lead.avro.LeadState getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(com.crm.validation.lead.avro.LeadState value) {
    this.state = value;
  }

  /**
   * Creates a new LeadRejectedEvent RecordBuilder.
   * @return A new LeadRejectedEvent RecordBuilder
   */
  public static com.crm.validation.lead.avro.LeadRejectedEvent.Builder newBuilder() {
    return new com.crm.validation.lead.avro.LeadRejectedEvent.Builder();
  }

  /**
   * Creates a new LeadRejectedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LeadRejectedEvent RecordBuilder
   */
  public static com.crm.validation.lead.avro.LeadRejectedEvent.Builder newBuilder(com.crm.validation.lead.avro.LeadRejectedEvent.Builder other) {
    if (other == null) {
      return new com.crm.validation.lead.avro.LeadRejectedEvent.Builder();
    } else {
      return new com.crm.validation.lead.avro.LeadRejectedEvent.Builder(other);
    }
  }

  /**
   * Creates a new LeadRejectedEvent RecordBuilder by copying an existing LeadRejectedEvent instance.
   * @param other The existing instance to copy.
   * @return A new LeadRejectedEvent RecordBuilder
   */
  public static com.crm.validation.lead.avro.LeadRejectedEvent.Builder newBuilder(com.crm.validation.lead.avro.LeadRejectedEvent other) {
    if (other == null) {
      return new com.crm.validation.lead.avro.LeadRejectedEvent.Builder();
    } else {
      return new com.crm.validation.lead.avro.LeadRejectedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for LeadRejectedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LeadRejectedEvent>
    implements org.apache.avro.data.RecordBuilder<LeadRejectedEvent> {

    private com.crm.validation.lead.avro.LeadId id;
    private com.crm.validation.lead.avro.LeadId.Builder idBuilder;
    private com.crm.validation.lead.avro.PersonalInfo personalInfo;
    private com.crm.validation.lead.avro.PersonalInfo.Builder personalInfoBuilder;
    private com.crm.validation.lead.avro.Email email;
    private com.crm.validation.lead.avro.Email.Builder emailBuilder;
    private com.crm.validation.lead.avro.PhoneNumber phoneNumber;
    private com.crm.validation.lead.avro.PhoneNumber.Builder phoneNumberBuilder;
    private com.crm.validation.lead.avro.Document document;
    private com.crm.validation.lead.avro.Document.Builder documentBuilder;
    private com.crm.validation.lead.avro.LeadState state;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.crm.validation.lead.avro.LeadRejectedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasIdBuilder()) {
        this.idBuilder = com.crm.validation.lead.avro.LeadId.newBuilder(other.getIdBuilder());
      }
      if (isValidValue(fields()[1], other.personalInfo)) {
        this.personalInfo = data().deepCopy(fields()[1].schema(), other.personalInfo);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasPersonalInfoBuilder()) {
        this.personalInfoBuilder = com.crm.validation.lead.avro.PersonalInfo.newBuilder(other.getPersonalInfoBuilder());
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasEmailBuilder()) {
        this.emailBuilder = com.crm.validation.lead.avro.Email.newBuilder(other.getEmailBuilder());
      }
      if (isValidValue(fields()[3], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[3].schema(), other.phoneNumber);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasPhoneNumberBuilder()) {
        this.phoneNumberBuilder = com.crm.validation.lead.avro.PhoneNumber.newBuilder(other.getPhoneNumberBuilder());
      }
      if (isValidValue(fields()[4], other.document)) {
        this.document = data().deepCopy(fields()[4].schema(), other.document);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasDocumentBuilder()) {
        this.documentBuilder = com.crm.validation.lead.avro.Document.newBuilder(other.getDocumentBuilder());
      }
      if (isValidValue(fields()[5], other.state)) {
        this.state = data().deepCopy(fields()[5].schema(), other.state);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing LeadRejectedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.crm.validation.lead.avro.LeadRejectedEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      this.idBuilder = null;
      if (isValidValue(fields()[1], other.personalInfo)) {
        this.personalInfo = data().deepCopy(fields()[1].schema(), other.personalInfo);
        fieldSetFlags()[1] = true;
      }
      this.personalInfoBuilder = null;
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      this.emailBuilder = null;
      if (isValidValue(fields()[3], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[3].schema(), other.phoneNumber);
        fieldSetFlags()[3] = true;
      }
      this.phoneNumberBuilder = null;
      if (isValidValue(fields()[4], other.document)) {
        this.document = data().deepCopy(fields()[4].schema(), other.document);
        fieldSetFlags()[4] = true;
      }
      this.documentBuilder = null;
      if (isValidValue(fields()[5], other.state)) {
        this.state = data().deepCopy(fields()[5].schema(), other.state);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public com.crm.validation.lead.avro.LeadId getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder setId(com.crm.validation.lead.avro.LeadId value) {
      validate(fields()[0], value);
      this.idBuilder = null;
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'id' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.crm.validation.lead.avro.LeadId.Builder getIdBuilder() {
      if (idBuilder == null) {
        if (hasId()) {
          setIdBuilder(com.crm.validation.lead.avro.LeadId.newBuilder(id));
        } else {
          setIdBuilder(com.crm.validation.lead.avro.LeadId.newBuilder());
        }
      }
      return idBuilder;
    }

    /**
     * Sets the Builder instance for the 'id' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder setIdBuilder(com.crm.validation.lead.avro.LeadId.Builder value) {
      clearId();
      idBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'id' field has an active Builder instance
     * @return True if the 'id' field has an active Builder instance
     */
    public boolean hasIdBuilder() {
      return idBuilder != null;
    }

    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder clearId() {
      id = null;
      idBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'personalInfo' field.
      * @return The value.
      */
    public com.crm.validation.lead.avro.PersonalInfo getPersonalInfo() {
      return personalInfo;
    }


    /**
      * Sets the value of the 'personalInfo' field.
      * @param value The value of 'personalInfo'.
      * @return This builder.
      */
    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder setPersonalInfo(com.crm.validation.lead.avro.PersonalInfo value) {
      validate(fields()[1], value);
      this.personalInfoBuilder = null;
      this.personalInfo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'personalInfo' field has been set.
      * @return True if the 'personalInfo' field has been set, false otherwise.
      */
    public boolean hasPersonalInfo() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'personalInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.crm.validation.lead.avro.PersonalInfo.Builder getPersonalInfoBuilder() {
      if (personalInfoBuilder == null) {
        if (hasPersonalInfo()) {
          setPersonalInfoBuilder(com.crm.validation.lead.avro.PersonalInfo.newBuilder(personalInfo));
        } else {
          setPersonalInfoBuilder(com.crm.validation.lead.avro.PersonalInfo.newBuilder());
        }
      }
      return personalInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'personalInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder setPersonalInfoBuilder(com.crm.validation.lead.avro.PersonalInfo.Builder value) {
      clearPersonalInfo();
      personalInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'personalInfo' field has an active Builder instance
     * @return True if the 'personalInfo' field has an active Builder instance
     */
    public boolean hasPersonalInfoBuilder() {
      return personalInfoBuilder != null;
    }

    /**
      * Clears the value of the 'personalInfo' field.
      * @return This builder.
      */
    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder clearPersonalInfo() {
      personalInfo = null;
      personalInfoBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public com.crm.validation.lead.avro.Email getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder setEmail(com.crm.validation.lead.avro.Email value) {
      validate(fields()[2], value);
      this.emailBuilder = null;
      this.email = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'email' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.crm.validation.lead.avro.Email.Builder getEmailBuilder() {
      if (emailBuilder == null) {
        if (hasEmail()) {
          setEmailBuilder(com.crm.validation.lead.avro.Email.newBuilder(email));
        } else {
          setEmailBuilder(com.crm.validation.lead.avro.Email.newBuilder());
        }
      }
      return emailBuilder;
    }

    /**
     * Sets the Builder instance for the 'email' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder setEmailBuilder(com.crm.validation.lead.avro.Email.Builder value) {
      clearEmail();
      emailBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'email' field has an active Builder instance
     * @return True if the 'email' field has an active Builder instance
     */
    public boolean hasEmailBuilder() {
      return emailBuilder != null;
    }

    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder clearEmail() {
      email = null;
      emailBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'phoneNumber' field.
      * @return The value.
      */
    public com.crm.validation.lead.avro.PhoneNumber getPhoneNumber() {
      return phoneNumber;
    }


    /**
      * Sets the value of the 'phoneNumber' field.
      * @param value The value of 'phoneNumber'.
      * @return This builder.
      */
    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder setPhoneNumber(com.crm.validation.lead.avro.PhoneNumber value) {
      validate(fields()[3], value);
      this.phoneNumberBuilder = null;
      this.phoneNumber = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'phoneNumber' field has been set.
      * @return True if the 'phoneNumber' field has been set, false otherwise.
      */
    public boolean hasPhoneNumber() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'phoneNumber' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.crm.validation.lead.avro.PhoneNumber.Builder getPhoneNumberBuilder() {
      if (phoneNumberBuilder == null) {
        if (hasPhoneNumber()) {
          setPhoneNumberBuilder(com.crm.validation.lead.avro.PhoneNumber.newBuilder(phoneNumber));
        } else {
          setPhoneNumberBuilder(com.crm.validation.lead.avro.PhoneNumber.newBuilder());
        }
      }
      return phoneNumberBuilder;
    }

    /**
     * Sets the Builder instance for the 'phoneNumber' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder setPhoneNumberBuilder(com.crm.validation.lead.avro.PhoneNumber.Builder value) {
      clearPhoneNumber();
      phoneNumberBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'phoneNumber' field has an active Builder instance
     * @return True if the 'phoneNumber' field has an active Builder instance
     */
    public boolean hasPhoneNumberBuilder() {
      return phoneNumberBuilder != null;
    }

    /**
      * Clears the value of the 'phoneNumber' field.
      * @return This builder.
      */
    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder clearPhoneNumber() {
      phoneNumber = null;
      phoneNumberBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'document' field.
      * @return The value.
      */
    public com.crm.validation.lead.avro.Document getDocument() {
      return document;
    }


    /**
      * Sets the value of the 'document' field.
      * @param value The value of 'document'.
      * @return This builder.
      */
    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder setDocument(com.crm.validation.lead.avro.Document value) {
      validate(fields()[4], value);
      this.documentBuilder = null;
      this.document = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'document' field has been set.
      * @return True if the 'document' field has been set, false otherwise.
      */
    public boolean hasDocument() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'document' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.crm.validation.lead.avro.Document.Builder getDocumentBuilder() {
      if (documentBuilder == null) {
        if (hasDocument()) {
          setDocumentBuilder(com.crm.validation.lead.avro.Document.newBuilder(document));
        } else {
          setDocumentBuilder(com.crm.validation.lead.avro.Document.newBuilder());
        }
      }
      return documentBuilder;
    }

    /**
     * Sets the Builder instance for the 'document' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder setDocumentBuilder(com.crm.validation.lead.avro.Document.Builder value) {
      clearDocument();
      documentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'document' field has an active Builder instance
     * @return True if the 'document' field has an active Builder instance
     */
    public boolean hasDocumentBuilder() {
      return documentBuilder != null;
    }

    /**
      * Clears the value of the 'document' field.
      * @return This builder.
      */
    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder clearDocument() {
      document = null;
      documentBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public com.crm.validation.lead.avro.LeadState getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder setState(com.crm.validation.lead.avro.LeadState value) {
      validate(fields()[5], value);
      this.state = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.crm.validation.lead.avro.LeadRejectedEvent.Builder clearState() {
      state = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LeadRejectedEvent build() {
      try {
        LeadRejectedEvent record = new LeadRejectedEvent();
        if (idBuilder != null) {
          try {
            record.id = this.idBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("id"));
            throw e;
          }
        } else {
          record.id = fieldSetFlags()[0] ? this.id : (com.crm.validation.lead.avro.LeadId) defaultValue(fields()[0]);
        }
        if (personalInfoBuilder != null) {
          try {
            record.personalInfo = this.personalInfoBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("personalInfo"));
            throw e;
          }
        } else {
          record.personalInfo = fieldSetFlags()[1] ? this.personalInfo : (com.crm.validation.lead.avro.PersonalInfo) defaultValue(fields()[1]);
        }
        if (emailBuilder != null) {
          try {
            record.email = this.emailBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("email"));
            throw e;
          }
        } else {
          record.email = fieldSetFlags()[2] ? this.email : (com.crm.validation.lead.avro.Email) defaultValue(fields()[2]);
        }
        if (phoneNumberBuilder != null) {
          try {
            record.phoneNumber = this.phoneNumberBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("phoneNumber"));
            throw e;
          }
        } else {
          record.phoneNumber = fieldSetFlags()[3] ? this.phoneNumber : (com.crm.validation.lead.avro.PhoneNumber) defaultValue(fields()[3]);
        }
        if (documentBuilder != null) {
          try {
            record.document = this.documentBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("document"));
            throw e;
          }
        } else {
          record.document = fieldSetFlags()[4] ? this.document : (com.crm.validation.lead.avro.Document) defaultValue(fields()[4]);
        }
        record.state = fieldSetFlags()[5] ? this.state : (com.crm.validation.lead.avro.LeadState) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LeadRejectedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<LeadRejectedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LeadRejectedEvent>
    READER$ = (org.apache.avro.io.DatumReader<LeadRejectedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










